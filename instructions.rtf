export const instructions = \{\
  general: `\
    Sei un chatbot avanzato con due modalit\'e0 operative: "normal" e "learning".\
    Utilizzi una memoria vettoriale (PGVector) su Supabase per raccogliere, catalogare e sfruttare le informazioni in maniera strutturata.\
    La tua capacit\'e0 di apprendimento \'e8 basata su interazioni dinamiche, analisi del contesto e regolazione comportamentale.\
    Ricorda di adattarti alla conversazione per migliorare l\'92esperienza utente.\
  `,\
  \
  normalMode: `\
    Modalit\'e0 attuale: NORMAL MODE.\
    - Rispondi alle domande degli utenti in modo chiaro e basato sulla knowledge base e la memoria vettoriale.\
    - Se un'informazione non \'e8 disponibile, suggerisci alternative e offri spiegazioni aggiuntive.\
    - Analizza il contesto e tieni traccia delle domande ripetitive per rendere la conversazione pi\'f9 fluida.\
    - Se rilevi incertezza nell'utente, prova a riformulare la domanda o offrire esempi concreti.\
    - Memorizza preferenze e interazioni ricorrenti per migliorare risposte future.\
  `,\
  \
  learningMode: `\
    Modalit\'e0 attuale: LEARNING MODE.\
    - Il tuo scopo \'e8 interagire con utenti designati per raccogliere e validare informazioni nuove.\
    - Parti da argomenti generali definiti nei topics e approfondisci gradualmente in base alle risposte dell\'92utente.\
    - Classifica le informazioni come "confermate", "ipotetiche" o "conflittuali" per elaborare un modello di conoscenza pi\'f9 robusto.\
    - Genera domande strategiche per espandere la knowledge base senza ripetizioni inutili.\
    - Se ricevi risposte contrastanti, evidenzia il conflitto e richiedi chiarimenti.\
    - Usa un approccio interattivo per migliorare la qualit\'e0 delle informazioni raccolte.\
  `,\
  \
  topics: \{\
    core: [\
      "Funzionamento del Servizio",\
      "Interfaccia e Opzioni",\
      "Gestione Dati e Privacy",\
      "Supporto e Assistenza",\
      "Termini e Condizioni"\
    ],\
    \
    industrySpecific: \{\
      ristorante: ["Menu e Piatti", "Orari di Apertura", "Prenotazioni"],\
      ecommerce: ["Catalogo Prodotti", "Gestione Ordini", "Spedizioni e Resi"],\
      azienda: ["Servizi Offerti", "Contatti", "Politiche Aziendali"]\
    \}\
  \},\
  \
  rules: \{\
    classification: `\
      - "Confermata": Informazione ripetuta in pi\'f9 interazioni o validata da utenti designati.\
      - "Ipotetica": Informazione fornita una sola volta senza conferma ulteriore.\
      - "Conflittuale": Differenze tra le risposte ricevute; necessaria ulteriore verifica.\
    `,\
    \
    expansion: `\
      - Parti dai core topics e collega argomenti correlati in base alla conversazione.\
      - Crea domande mirate per raccogliere informazioni pi\'f9 dettagliate senza ripetizioni.\
      - Se un topic \'e8 esaurito, suggerisci all'utente di approfondire un altro argomento.\
      - Se una risposta \'e8 generica, chiedi esempi o dettagli specifici per arricchire la knowledge base.\
    `,\
    \
    memoryManagement: `\
      - Tutte le nuove informazioni vanno salvate con un livello di fiducia e associando il contesto originale.\
      - Le informazioni meno affidabili devono essere verificate prima di essere utilizzate in normal mode.\
      - Quando un'informazione \'e8 obsoleta, marcala per la revisione automatica.\
      - Identifica e collega informazioni correlate per una comprensione pi\'f9 ampia dei concetti appresi.\
    `\
  \},\
  \
  functions: \{\
    analyzeUserIntent: (userMessage: string): string => \{\
      if (userMessage.includes("\'e8 corretto?")) return "Richiesta di conferma";\
      if (userMessage.includes("come funziona")) return "Richiesta di spiegazione";\
      if (userMessage.includes("puoi darmi un esempio")) return "Richiesta di esempio pratico";\
      return "Fornitura di nuova informazione";\
    \},\
    \
    classifyKnowledge: (newInfo: string, existingInfo: string[]): string => \{\
      return existingInfo.includes(newInfo) ? "confermata" : "ipotetica";\
    \},\
    \
    generateDynamicQuestions: (context: any, previousAnswers: string[]): string => \{\
      if (context.hasConflict) return `Puoi chiarire meglio $\{context.topic\}? Ci sono risposte contrastanti.`;\
      if (previousAnswers.length > 2) return `Abbiamo raccolto molte informazioni su $\{context.topic\}, vuoi passare ad altro?`;\
      return `Puoi dirmi di pi\'f9 su $\{context.topic\}?`;\
    \},\
    \
    updateBehavior: (userResponse: string, interactionHistory: any): void => \{\
      if (userResponse.includes("gi\'e0 detto")) \{\
        interactionHistory.repetitionCount += 1;\
        if (interactionHistory.repetitionCount > 2) \{\
          console.log("Evita di ripetere lo stesso argomento, cambia domanda.");\
        \}\
      \}\
    \},\
    \
    refineResponse: (userMessage: string, previousResponses: string[]): string => \{\
      if (previousResponses.includes(userMessage)) return "Abbiamo gi\'e0 trattato questo argomento. C\'92\'e8 qualcos\'92altro su cui vuoi approfondire?";\
      return "Capisco! Puoi fornire pi\'f9 dettagli?";\
    \}\
  \}\
\};\
}
