import \{ getKnowledge, searchVectorMemory, saveKnowledge, saveVectorMemory, updateKnowledge, deleteKnowledge \} from "./memory";\
import \{ franc \} from "franc";\
\
/**\
 * Determina la modalit\'e0 della richiesta\
 * @param userId - Identificativo dell'utente\
 * @returns "learning" se \'e8 un admin, altrimenti "normal"\
 */\
function getUserMode(userId: string): "learning" | "normal" \{\
    const adminUsers = [process.env.ADMIN_USER_ID]; // Array di utenti admin definiti nell'env\
    return adminUsers.includes(userId) ? "learning" : "normal";\
\}\
\
// Memoria temporanea per il contesto della conversazione\
const userContext: \{ [userId: string]: \{ lastTopic?: string; recentQuestions?: string[] \} \} = \{\};\
\
/**\
 * Elabora una richiesta dell'utente e genera una risposta adeguata\
 * @param userId - Identificativo dell'utente\
 * @param message - Testo del messaggio ricevuto\
 * @returns Risposta del chatbot\
 */\
export async function processUserMessage(userId: string, message: string): Promise<string> \{\
// Rileva la lingua del messaggio utente\
const langCode = franc(message); // Restituisce un codice lingua (es. "ita" per italiano, "eng" per inglese, "und" se non determinata)\
\
    const mode = getUserMode(userId);\
    \
    if (mode === "learning") \{\
        return await handleLearningMode(message, userId);\
    \} else \{\
        return await handleNormalMode(message, userId);\
    \}\
\}\
\
/**\
 * Gestisce la modalit\'e0 "normal", recuperando le informazioni dalla knowledge base o memoria vettoriale\
 * @param message - Testo della query dell'utente\
 * @param userId - Identificativo dell'utente\
 * @returns Risposta generata basata sulla conoscenza esistente\
 */\
async function handleNormalMode(message: string, userId: string): Promise<string> \{\
    if (!userContext[userId]) \{\
        userContext[userId] = \{ lastTopic: "", recentQuestions: [] \};\
    \}\
    \
    if (userContext[userId].recentQuestions?.includes(message)) \{\
        return "Abbiamo gi\'e0 parlato di questo. Vuoi approfondire un altro aspetto?";\
    \}\
    \
    // Cerca prima nella knowledge base\
    const knowledge = await getKnowledge(message);\
    if (knowledge) \{\
        userContext[userId].lastTopic = message;\
        userContext[userId].recentQuestions?.push(message);\
        return knowledge;\
    \}\
    \
    // Poi prova con una ricerca vettoriale\
    const vectorResults = await searchVectorMemory(message);\
    if (vectorResults.length > 0) \{\
        return `Forse posso aiutarti con questo: "$\{vectorResults[0].text\}". Ti serve altro?`;\
    \}\
    \
    return `Non ho informazioni precise su questo. Potresti riformulare la domanda o specificare meglio?`;\
\}\
\
/**\
 * Gestisce la modalit\'e0 "learning", consentendo l'inserimento, aggiornamento e cancellazione di informazioni\
 * @param message - Testo della query dell'utente admin\
 * @param userId - Identificativo dell'utente admin\
 * @returns Conferma dell'apprendimento, aggiornamento o cancellazione\
 */\
async function handleLearningMode(message: string, userId: string): Promise<string> \{\
    const [topic, ...contentArray] = message.split(":");\
    const content = contentArray.join(":").trim();\
\
    if (!topic || !content) \{\
        return "Formato non valido. Usa 'argomento: contenuto' per insegnarmi qualcosa.";\
    \}\
\
    // Controllo se l'informazione esiste gi\'e0\
    const existingKnowledge = await getKnowledge(topic);\
    if (existingKnowledge) \{\
        return `So gi\'e0 qualcosa su "$\{topic\}": "$\{existingKnowledge\}".\
\
Vuoi **aggiornare** questa informazione? Rispondi con **S\'ec: nuovo contenuto** o **Elimina** per cancellarla.`;\
    \}\
\
    // Salvataggio della nuova informazione\
    const knowledgeSaved = await saveKnowledge(topic, content, "admin");\
    const vectorSaved = await saveVectorMemory(content);\
\
    return knowledgeSaved && vectorSaved\
        ? `Ottimo! Ho memorizzato "$\{topic\}". Se vuoi aggiungere altro, sono qui!`\
        : "C'\'e8 stato un problema nel salvataggio, riprova.";\
\}\
\
/**\
 * Gestisce aggiornamenti o eliminazioni delle knowledge esistenti\
 * @param topic - Argomento dell'informazione da aggiornare/eliminare\
 * @param content - Nuovo contenuto o comando "Elimina"\
 * @returns Conferma dell'aggiornamento o cancellazione\
 */\
async function handleKnowledgeUpdate(topic: string, content: string): Promise<string> \{\
    if (content.toLowerCase() === "elimina") \{\
        const deleted = await deleteKnowledge(topic);\
        return deleted ? `"$\{topic\}" \'e8 stato eliminato correttamente.` : "Errore nella cancellazione.";\
    \}\
\
    const updated = await updateKnowledge(topic, content);\
    return updated ? `"$\{topic\}" \'e8 stato aggiornato con successo!` : "Errore nell'aggiornamento.";\
\}\
}
